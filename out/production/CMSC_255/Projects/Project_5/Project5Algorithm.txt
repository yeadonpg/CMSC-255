BEGIN ALGORITHM

1. Parse the following inputs from the user, in order:

- String; containing cities, separated by commas
    - Compile the string to a 1D array:
    BEGIN getCity(inputCityString) {
        RETURN inputCityString.split(",")
    } END getCity

- String; containing distances from each city (format: dist1,dist2<>dist1,dist2)
    - Compile the string to a 2D array:
    BEGIN getDistance() {
        int[][] output = {}
        String[] unsplitDistances = inputDistanceString.split("<>")

        FOR (int i - 0; i < unsplitDistances.length; i++) {
            String[] splitDistances = getCity(unsplitDistances[i])
            FOR (int j = 0; j < splitDistances.length; j++) {
                output.append(toInteger(splitDistances[j]))
            } END FOR
        } END FOR
        RETURN output
    } END getDistance

- Boolean; whether to search above or below the given distance
- Integer; the maximum or minimum distance between cities
- String; the city the user wants to search distances from

2. Compile a list of cities that meet the given criteria, excluding the city being measured from:

    String[] matches = searchDistance(String[] cities, int[][] distances, boolean aboveVal, int aDistance, String aCity) {
        String[] output = {}
        int aCityIndex = int getIndex(cities, aCity) {
            FOR (int i = 0; i < cities.length; i++) {
                IF (cities[i].equals(aCity)) {
                    RETURN i
                } END IF
            } END FOR
            RETURN -1;
        } END getIndex

        IF (aboveVal) {
            FOR (int i = 0; i < cities.length; i++) {
                int distance = distances[aCityIndex][i]
                IF (distance >= aDistance && !cities[i].equals(aCity)) {
                    output.append(cities[i])
                } END IF
            } END FOR
        ELSE
            FOR (int i = 0; i < cities.length; i++) {
                IF (distance <= aDistance && !cities[i].equals(aCity)) {
                    output.append(cities[i])
                } END IF
            } END FOR
        } END IF
    } END searchDistance

3. Display the list of matches to the user

END ALGORITHM